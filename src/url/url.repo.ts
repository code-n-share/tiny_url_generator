import { Injectable } from "@nestjs/common";
import { nanoid } from "nanoid";

@Injectable()
export class UrlRepo {
  urls = new Map<string,string>(); // data store containing url & short url
  codes = [] // data store containing unused short codes generated by a background process

  async getByShortUrlCode(code: string){

    const url = this.urls.get(code);
    if(url){
        return url;
    }
  }

  async getByUrl(url: string){

    this.urls.forEach((value: string, key: string) => {
        if(value === url){
            return key
        }
    });
    return null;
  }

  async createShortUrlCode(url: string){
    const code = await this.getShortCode();
    this.urls.set(code, url);
    return code;
  }

  private async getShortCode(){
    let length = this.codes.length;

    // TODO : this needs to be background process, pre-populating shortCodes when it goes below a threshold
    if(length < 100){
        for (let i = 0; i < 100; i++) {
            this.codes.push(nanoid(10));
        }
    }
    return this.codes.pop();
  }
}